#!/usr/bin/env python3
"""
Script para corrigir detec√ß√£o de sintomas cr√≠ticos
"""

import re
import shutil
from pathlib import Path

def corrigir_deteccao():
    """Aplicar corre√ß√£o na detec√ß√£o de sintomas cr√≠ticos"""
    
    arquivo_original = Path("src/chatbot.py")
    arquivo_backup = Path("src/chatbot.py.backup")
    
    print("üîß APLICANDO CORRE√á√ÉO CR√çTICA...")
    print("=" * 40)
    
    # 1. Backup
    if not arquivo_backup.exists():
        shutil.copy2(arquivo_original, arquivo_backup)
        print("‚úÖ Backup criado: src/chatbot.py.backup")
    
    # 2. Ler arquivo
    with open(arquivo_original, 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    # 3. Encontrar fun√ß√£o atual
    padrao_funcao = r'def detectar_sintomas_criticos\(self, texto: str\) -> bool:.*?return any\(re\.search\(padrao, texto_lower\) for padrao in padroes_criticos\)'
    
    # 4. Nova fun√ß√£o corrigida
    nova_funcao = '''def detectar_sintomas_criticos(self, texto: str) -> bool:
        """Detectar sintomas cr√≠ticos - VERS√ÉO CORRIGIDA"""
        texto_lower = texto.lower()
        
        # PADR√ïES MAIS ABRANGENTES E SEGUROS
        padroes_criticos = [
            # Idea√ß√£o suicida
            r"pensando em suic√≠dio",
            r"pensando em suicidio", 
            r"quero (me )?matar",
            r"vou (me )?suicidar",
            r"vou (me )?suicid",
            r"quero morrer",
            r"prefiro morrer",
            r"melhor morrer",
            
            # Desesperan√ßa
            r"n√£o aguento mais",
            r"nao aguento mais",
            r"n√£o suporto mais",
            r"nao suporto mais",
            r"n√£o aguento mais viver",
            r"cansei de viver",
            r"quero desaparecer",
            
            # Planos/m√©todos
            r"vou acabar com tudo",
            r"vou me jogar",
            r"vou tomar todos",
            r"tentei me matar",
            r"j√° tentei (me )?matar",
            r"como me matar",
            r"maneiras de morrer",
            
            # Sintomas psic√≥ticos
            r"escuto vozes",
            r"ou√ßo vozes",
            r"vejo coisas",
            r"pessoas que n√£o existem",
            r"vozes na (minha )?cabe√ßa",
            
            # Express√µes diretas
            r"\\bsuic√≠dio\\b",
            r"\\bsuicidio\\b",
            r"\\bmatar-me\\b",
            r"\\bme matar\\b",
        ]
        
        # Verificar se algum padr√£o √© encontrado
        for padrao in padroes_criticos:
            if re.search(padrao, texto_lower):
                logger.critical(f"üö® PADR√ÉO CR√çTICO DETECTADO: '{padrao}' em '{texto[:50]}...'")
                return True
        
        return False'''
    
    # 5. Substituir usando regex mais flex√≠vel
    if 'def detectar_sintomas_criticos(self, texto: str) -> bool:' in conteudo:
        # Encontrar in√≠cio da fun√ß√£o
        inicio = conteudo.find('def detectar_sintomas_criticos(self, texto: str) -> bool:')
        
        # Encontrar fim da fun√ß√£o (pr√≥xima fun√ß√£o ou final)
        resto = conteudo[inicio:]
        fim_relativo = resto.find('\n    def ')  # Pr√≥xima fun√ß√£o
        if fim_relativo == -1:
            fim_relativo = resto.find('\n\nclass ')  # Pr√≥xima classe
        if fim_relativo == -1:
            fim_relativo = len(resto)  # Final do arquivo
        
        fim = inicio + fim_relativo
        
        # Substituir
        conteudo_novo = conteudo[:inicio] + nova_funcao + conteudo[fim:]
        
        # 6. Salvar
        with open(arquivo_original, 'w', encoding='utf-8') as f:
            f.write(conteudo_novo)
        
        print("‚úÖ Fun√ß√£o detectar_sintomas_criticos corrigida!")
        print("üîß Padr√µes expandidos de 7 para 20+")
        print("‚úÖ Agora detecta 'pensando em suic√≠dio'")
        print("‚úÖ Agora detecta 'n√£o aguento mais'")
        
        return True
    else:
        print("‚ùå Fun√ß√£o n√£o encontrada!")
        return False

def testar_correcao():
    """Testar se a corre√ß√£o funciona"""
    print("\nüß™ TESTANDO CORRE√á√ÉO...")
    print("=" * 30)
    
    try:
        # Importar chatbot corrigido
        import sys
        sys.path.append('src')
        
        # Remover m√≥dulo se j√° carregado
        if 'chatbot' in sys.modules:
            del sys.modules['chatbot']
        
        from chatbot import LlamaTriagemBot
        
        # Testar detec√ß√£o
        bot = LlamaTriagemBot()
        
        frases_teste = [
            "Estou pensando em suic√≠dio e n√£o aguento mais",
            "Quero morrer",
            "N√£o aguento mais",
            "Ol√°, como vai?",  # Esta N√ÉO deve detectar
        ]
        
        for frase in frases_teste:
            detectado = bot.detectar_sintomas_criticos(frase)
            status = "üö® CR√çTICO" if detectado else "‚úÖ Normal"
            print(f"   {status}: '{frase}'")
        
        print("\n‚úÖ Teste conclu√≠do!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üö® CORRE√á√ÉO DE SEGURAN√áA CR√çTICA")
    print("Bug: Sistema n√£o detectava 'pensando em suic√≠dio'")
    print("=" * 50)
    
    # Aplicar corre√ß√£o
    sucesso = corrigir_deteccao()
    
    if sucesso:
        # Testar
        testar_correcao()
        
        print("\n" + "=" * 50)
        print("‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
        print("\nüî• PR√ìXIMOS PASSOS:")
        print("1. Execute: python main.py")
        print("2. Digite: 'Estou pensando em suic√≠dio'")
        print("3. Verifique se @curai1bot recebe notifica√ß√£o")
        print("\nüö® ESTE BUG DE SEGURAN√áA FOI CORRIGIDO!")
    else:
        print("\n‚ùå FALHA NA CORRE√á√ÉO!")
        print("Aplique manualmente substituindo a fun√ß√£o.")
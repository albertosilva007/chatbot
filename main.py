#!/usr/bin/env python3
"""
Chatbot de Triagem Psicol√≥gica com LLaMA
Arquivo Principal - main.py (ATUALIZADO)
"""

import os
import sys
from pathlib import Path

# Adicionar src ao path para imports
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from dotenv import load_dotenv
    from loguru import logger
    from rich.console import Console
    from rich.panel import Panel
    DEPENDENCIES_OK = True
except ImportError as e:
    print(f"‚ùå Erro: Depend√™ncias n√£o instaladas: {e}")
    print("Execute: pip install -r requirements.txt")
    DEPENDENCIES_OK = False
    sys.exit(1)

# Carregar vari√°veis de ambiente
load_dotenv()

# Console colorido
console = Console()


def main():
    """Fun√ß√£o principal do chatbot"""

    # Banner inicial
    console.print(Panel.fit(
        "[bold blue]üè• Chatbot de Triagem Psicol√≥gica[/bold blue]\n"
        "[green]Baseado em LLaMA e Protocolos M√©dicos[/green]\n"
        "[yellow]Vers√£o: 2.0.0 - CHATBOT REAL[/yellow]",
        border_style="blue",
        title="Sistema de Triagem"
    ))

    # Verificar estrutura do projeto
    console.print("[yellow]üîç Verificando estrutura do projeto...[/yellow]")

    required_folders = ["src", "config", "data", "interfaces"]
    missing_folders = []

    for folder in required_folders:
        if not Path(folder).exists():
            missing_folders.append(folder)

    if missing_folders:
        console.print(f"[red]‚ùå Pastas faltando: {missing_folders}[/red]")
        return

    console.print("[green]‚úÖ Estrutura do projeto OK![/green]")

    # Tentar importar e usar o chatbot REAL
    try:
        console.print("[yellow]ü§ñ Carregando chatbot REAL...[/yellow]")

        # Importar chatbot implementado
        from chatbot import LlamaTriagemBot

        # Escolher modelo (come√ßar com menor para teste)
        model_name = os.getenv("MODEL_NAME", None)  # None = modo simula√ß√£o

        if model_name:
            console.print(f"[cyan]üì• Carregando modelo: {model_name}[/cyan]")
        else:
            console.print(
                "[yellow]‚ö†Ô∏è  Usando modo simula√ß√£o (sem LLaMA)[/yellow]")

        # Inicializar chatbot
        bot = LlamaTriagemBot(model_name)

        console.print("[green]‚úÖ Chatbot inicializado com sucesso![/green]")

        # Instru√ß√µes
        console.print("\n[bold cyan]üéØ INSTRU√á√ïES:[/bold cyan]")
        console.print("‚Ä¢ Este √© o chatbot REAL de triagem psicol√≥gica")
        console.print("‚Ä¢ Segue protocolos m√©dicos rigorosos")
        console.print("‚Ä¢ Detecta emerg√™ncias automaticamente")
        console.print("‚Ä¢ Salva hist√≥rico no banco de dados")
        console.print("‚Ä¢ Digite 'sair' para encerrar")

        # Loop principal do chatbot
        chatbot_loop(bot)

    except ImportError as e:
        console.print(f"[red]‚ùå Erro ao importar chatbot: {e}[/red]")
        console.print(
            "[yellow]Verifique se o arquivo src/chatbot.py existe[/yellow]")
    except Exception as e:
        logger.error(f"Erro geral: {e}")
        console.print(f"[red]‚ùå Erro inesperado: {e}[/red]")


def chatbot_loop(bot):
    """Loop principal do chatbot"""
    console.print("\n[bold green]üöÄ CHATBOT DE TRIAGEM ATIVO![/bold green]")
    console.print(
        "[cyan]Comece dizendo ol√° ou contando como se sente...[/cyan]")

    user_id = "user_main"

    while True:
        try:
            # Input do usu√°rio
            mensagem = console.input("\n[bold cyan]Voc√™:[/bold cyan] ")

            # Comandos especiais
            if mensagem.lower() in ['sair', 'exit', 'quit']:
                console.print("[yellow]üëã Encerrando triagem...[/yellow]")
                break
            elif mensagem.lower() == 'novo':
                # Reiniciar sess√£o
                if user_id in bot.sessoes:
                    del bot.sessoes[user_id]
                console.print("[green]üîÑ Nova triagem iniciada![/green]")
                continue
            elif mensagem.lower() == 'historico':
                # Mostrar hist√≥rico (se implementado)
                console.print(
                    "[yellow]üìä Funcionalidade de hist√≥rico em desenvolvimento[/yellow]")
                continue

            # Processar mensagem
            resposta = bot.processar_mensagem(mensagem, user_id)

            # Exibir resposta
            console.print(f"[bold green]Assistente:[/bold green] {resposta}")

            # Log da intera√ß√£o
            logger.info(f"User: {mensagem[:50]}... | Bot: {resposta[:50]}...")

        except KeyboardInterrupt:
            console.print("\n[yellow]üëã Encerrando...[/yellow]")
            break
        except Exception as e:
            logger.error(f"Erro no loop: {e}")
            console.print(f"[red]‚ùå Erro: {e}[/red]")
            console.print("[yellow]Continuando...[/yellow]")


def mostrar_informacoes():
    """Mostra informa√ß√µes do sistema"""
    console.print("\n[bold blue]‚ÑπÔ∏è  INFORMA√á√ïES DO SISTEMA:[/bold blue]")
    console.print("‚Ä¢ Protocolos baseados em fluxograma m√©dico")
    console.print("‚Ä¢ 4 n√≠veis de gravidade: Leve, Moderado, Intenso, Urgente")
    console.print("‚Ä¢ Detec√ß√£o autom√°tica de sintomas cr√≠ticos")
    console.print("‚Ä¢ Banco de dados SQLite para hist√≥rico")
    console.print("‚Ä¢ Logs detalhados em data/logs/")


if __name__ == "__main__":
    if DEPENDENCIES_OK:
        main()
    else:
        print("Instale as depend√™ncias primeiro!")

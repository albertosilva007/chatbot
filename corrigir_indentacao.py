#!/usr/bin/env python3
"""
Corrigir erro de indenta√ß√£o no chatbot.py
"""

import re
import shutil
from pathlib import Path

def corrigir_indentacao():
    """Corrigir indenta√ß√£o da fun√ß√£o detectar_sintomas_criticos"""
    
    arquivo = Path("src/chatbot.py")
    arquivo_backup = Path("src/chatbot.py.bkp2")
    
    print("üîß CORRIGINDO INDENTA√á√ÉO...")
    print("=" * 40)
    
    # Backup
    shutil.copy2(arquivo, arquivo_backup)
    print("‚úÖ Backup criado: src/chatbot.py.bkp2")
    
    # Ler arquivo
    with open(arquivo, 'r', encoding='utf-8') as f:
        linhas = f.readlines()
    
    # Encontrar fun√ß√£o problem√°tica
    inicio_funcao = None
    for i, linha in enumerate(linhas):
        if 'def detectar_sintomas_criticos(self, texto: str) -> bool:' in linha:
            inicio_funcao = i
            break
    
    if inicio_funcao is None:
        print("‚ùå Fun√ß√£o n√£o encontrada!")
        return False
    
    # Fun√ß√£o corrigida com indenta√ß√£o correta (4 espa√ßos)
    funcao_corrigida = [
        '    def detectar_sintomas_criticos(self, texto: str) -> bool:\n',
        '        """Detectar sintomas cr√≠ticos - VERS√ÉO CORRIGIDA"""\n',
        '        texto_lower = texto.lower()\n',
        '        \n',
        '        padroes_criticos = [\n',
        '            r"pensando em suic√≠dio",\n',
        '            r"pensando em suicidio",\n', 
        '            r"quero (me )?matar",\n',
        '            r"vou (me )?suicidar",\n',
        '            r"quero morrer",\n',
        '            r"n√£o aguento mais",\n',
        '            r"nao aguento mais",\n',
        '            r"n√£o suporto mais",\n',
        '            r"cansei de viver",\n',
        '            r"vou acabar com tudo",\n',
        '            r"tentei me matar",\n',
        '            r"escuto vozes",\n',
        '            r"ou√ßo vozes",\n',
        '            r"vejo coisas",\n',
        '            r"\\bsuic√≠dio\\b",\n',
        '            r"\\bsuicidio\\b",\n',
        '        ]\n',
        '        \n',
        '        for padrao in padroes_criticos:\n',
        '            if re.search(padrao, texto_lower):\n',
        '                logger.critical(f"üö® PADR√ÉO CR√çTICO DETECTADO: \'{padrao}\' em \'{texto[:50]}...\'")\n',
        '                return True\n',
        '        \n',
        '        return False\n',
    ]
    
    # Encontrar fim da fun√ß√£o (pr√≥xima fun√ß√£o com mesma indenta√ß√£o)
    fim_funcao = None
    for i in range(inicio_funcao + 1, len(linhas)):
        linha = linhas[i]
        # Encontrar pr√≥xima fun√ß√£o com indenta√ß√£o de classe (4 espa√ßos)
        if linha.startswith('    def ') and i > inicio_funcao + 5:
            fim_funcao = i
            break
    
    if fim_funcao is None:
        # N√£o encontrou pr√≥xima fun√ß√£o, ir at√© encontrar classe ou fim
        for i in range(inicio_funcao + 1, len(linhas)):
            if linhas[i].startswith('class ') or linhas[i].startswith('def '):
                fim_funcao = i
                break
        if fim_funcao is None:
            fim_funcao = len(linhas)
    
    print(f"üìç Fun√ß√£o encontrada: linhas {inicio_funcao + 1} a {fim_funcao}")
    
    # Construir novo arquivo
    novas_linhas = (
        linhas[:inicio_funcao] +  # Antes da fun√ß√£o
        funcao_corrigida +        # Fun√ß√£o corrigida
        linhas[fim_funcao:]       # Depois da fun√ß√£o
    )
    
    # Salvar arquivo corrigido
    with open(arquivo, 'w', encoding='utf-8') as f:
        f.writelines(novas_linhas)
    
    print("‚úÖ Indenta√ß√£o corrigida!")
    print("‚úÖ Fun√ß√£o detectar_sintomas_criticos reescrita")
    print("‚úÖ Arquivo salvo")
    
    return True

def verificar_sintaxe():
    """Verificar se arquivo est√° com sintaxe correta"""
    print("\nüîç VERIFICANDO SINTAXE...")
    print("-" * 30)
    
    try:
        import py_compile
        py_compile.compile('src/chatbot.py', doraise=True)
        print("‚úÖ Sintaxe correta!")
        return True
    except py_compile.PyCompileError as e:
        print(f"‚ùå Erro de sintaxe: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def teste_rapido():
    """Teste r√°pido da corre√ß√£o"""
    print("\nüß™ TESTE R√ÅPIDO...")
    print("-" * 20)
    
    try:
        import sys
        sys.path.append('src')
        
        # Remover m√≥dulo se carregado
        if 'chatbot' in sys.modules:
            del sys.modules['chatbot']
        
        from chatbot import LlamaTriagemBot
        
        bot = LlamaTriagemBot()
        
        # Teste
        frase = "Estou pensando em suic√≠dio"
        detectado = bot.detectar_sintomas_criticos(frase)
        
        if detectado:
            print(f"‚úÖ SUCESSO: '{frase}' foi detectado!")
            print("üéâ Corre√ß√£o funcionando!")
        else:
            print(f"‚ùå FALHA: '{frase}' N√ÉO foi detectado!")
        
        return detectado
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    print("üîß CORRE√á√ÉO DE INDENTA√á√ÉO")
    print("Corrigindo erro: unindent does not match any outer indentation level")
    print("=" * 60)
    
    # Aplicar corre√ß√£o
    sucesso = corrigir_indentacao()
    
    if sucesso:
        # Verificar sintaxe
        sintaxe_ok = verificar_sintaxe()
        
        if sintaxe_ok:
            # Teste r√°pido
            funciona = teste_rapido()
            
            if funciona:
                print("\nüéâ CORRE√á√ÉO COMPLETA!")
                print("‚úÖ Indenta√ß√£o corrigida")
                print("‚úÖ Sintaxe v√°lida") 
                print("‚úÖ Detec√ß√£o funcionando")
                print("\nüöÄ EXECUTE AGORA:")
                print("   python main.py")
                print("   Digite: 'Estou pensando em suic√≠dio'")
                print("   Verifique @curai1bot")
            else:
                print("\n‚ö†Ô∏è Corre√ß√£o aplicada mas teste falhou")
                print("Execute python main.py para testar completo")
        else:
            print("\n‚ùå Ainda h√° erro de sintaxe")
            print("Verifique o arquivo manualmente")
    else:
        print("\n‚ùå Falha na corre√ß√£o")
        print("Edite o arquivo manualmente")
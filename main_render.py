#!/usr/bin/env python3
"""
Sistema de Triagem Psicol√≥gica - VERS√ÉO FLASK SIMPLES
"""

import os
from flask import Flask, render_template_string, request, jsonify
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
PORT = int(os.environ.get("PORT", 7860))
HOST = "0.0.0.0"

app = Flask(__name__)

class TriagemRender:
    """Sistema simplificado para Render"""
    
    def __init__(self):
        print("üöÄ Inicializando Sistema de Triagem no Render...")
        
        self.telegram_ativo = bool(os.getenv("TELEGRAM_BOT_TOKEN"))
        self.hf_token = bool(os.getenv("HUGGINGFACE_TOKEN"))
        self.modo = "DEMO - RENDER"
            
        print(f"ü§ñ Modo: {self.modo}")
        print(f"üì± Telegram: {'‚úÖ' if self.telegram_ativo else '‚ùå'}")
        print(f"ü§ó HuggingFace: {'‚úÖ' if self.hf_token else '‚ùå'}")
    
    def demo_response(self, message):
        """Resposta demo inteligente"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['suic√≠dio', 'suicidio', 'matar', 'morte', 'morrer']):
            return """üö® **PROTOCOLO DE EMERG√äNCIA ATIVADO** üö®

**IMPORTANTE:** Voc√™ n√£o est√° sozinho!

üìû **CONTATOS URGENTES:**
‚Ä¢ SAMU: 192
‚Ä¢ CVV: 188  
‚Ä¢ Pol√≠cia: 190

‚úÖ **EM PRODU√á√ÉO COMPLETA:**
‚Ä¢ Dr. Jos√© seria notificado automaticamente
‚Ä¢ Protocolos de seguran√ßa ativados
‚Ä¢ Hist√≥rico seguro mantido

*Esta √© uma vers√£o demonstrativa. Em emerg√™ncias reais, sempre ligue 192.*"""
        
        elif any(word in message_lower for word in ['triste', 'deprimido', 'ansiedade', 'ang√∫stia', 'preocupado']):
            return f"""üíô Entendo que voc√™ est√° passando por dificuldades.

**Sistema de Triagem - {self.modo}:**
ü§ñ An√°lise de sentimentos ativa
üì± Notifica√ß√µes {'configuradas' if self.telegram_ativo else 'pendentes'}
üíæ Conversas registradas com seguran√ßa
üîí Ambiente criptografado

**Como posso ajudar voc√™ hoje?**
‚Ä¢ Me conte mais sobre seus sentimentos
‚Ä¢ Est√° acontecendo algo espec√≠fico?

*Sistema dispon√≠vel 24/7 para apoio.*"""
        
        elif any(word in message_lower for word in ['ol√°', 'oi', 'hello', 'bom dia', 'boa tarde', 'boa noite']):
            return f"""üè• **Bem-vindo ao Sistema de Triagem Psicol√≥gica** 

**Status do Sistema:** {self.modo} ‚òÅÔ∏è
**Disponibilidade:** 24/7 Global
**Seguran√ßa:** SSL/HTTPS ativo
**Telegram:** {'‚úÖ Configurado' if self.telegram_ativo else '‚ö†Ô∏è Pendente'}

**Para come√ßar sua triagem:**
‚Ä¢ Diga seu nome
‚Ä¢ Conte como est√° se sentindo hoje
‚Ä¢ Compartilhe suas preocupa√ß√µes

*Este √© um ambiente seguro e confidencial.*"""
        
        elif any(word in message_lower for word in ['dor', 'doendo', 'machuca', 'sofrendo']):
            return """üòî Sinto muito que voc√™ esteja com dor.

**Tipos de suporte dispon√≠vel:**
üß† Emocional: Conversas de apoio
üè• Cl√≠nico: Triagem para direcionamento
üìû Emergencial: Contatos de ajuda imediata

**Me conte mais:**
‚Ä¢ Que tipo de dor voc√™ sente?
‚Ä¢ √â f√≠sica ou emocional?
‚Ä¢ H√° quanto tempo isso come√ßou?

Estou aqui para ouvir e ajudar."""
        
        elif any(word in message_lower for word in ['obrigado', 'obrigada', 'valeu', 'thanks']):
            return """üòä Fico feliz em poder ajudar!

**Lembre-se:**
‚Ä¢ Este sistema est√° sempre dispon√≠vel
‚Ä¢ Suas conversas ficam registradas com seguran√ßa  
‚Ä¢ Em emerg√™ncias, ligue 192 ou 188

**Continue voltando sempre que precisar.**
Este √© seu espa√ßo de apoio e cuidado.

*Cuide-se! üíô*"""
        
        else:
            truncated_msg = message[:50] + '...' if len(message) > 50 else message
            return f"""**Processando sua mensagem:** "{truncated_msg}"

**Sistema:** {self.modo} ‚òÅÔ∏è
**An√°lise:** Aguardando mais informa√ß√µes
**Status:** {'üü¢ Todos sistemas operacionais' if self.telegram_ativo and self.hf_token else 'üü° Configura√ß√£o b√°sica'}

**Continue me contando:**
‚Ä¢ Como voc√™ est√° se sentindo?
‚Ä¢ O que est√° te preocupando?
‚Ä¢ Em que posso ajudar hoje?

*Seu bem-estar √© nossa prioridade.*"""

# Inicializar sistema
triagem = TriagemRender()

# Template HTML
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üè• Sistema de Triagem Psicol√≥gica</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header {
            background: rgba(255,255,255,0.95);
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .main-content {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }
        .chat-container {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .status-panel {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            height: fit-content;
        }
        .chat-messages {
            height: 400px;
            overflow-y: auto;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
            background: #f8f9fa;
        }
        .message {
            margin-bottom: 1rem;
            padding: 1rem;
            border-radius: 10px;
        }
        .user-message {
            background: #007bff;
            color: white;
            margin-left: 2rem;
        }
        .bot-message {
            background: #e9ecef;
            margin-right: 2rem;
        }
        .input-container {
            display: flex;
            gap: 1rem;
        }
        .message-input {
            flex: 1;
            padding: 1rem;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            font-size: 16px;
        }
        .send-btn, .emergency-btn, .clear-btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }
        .send-btn {
            background: #28a745;
            color: white;
        }
        .emergency-btn {
            background: #dc3545;
            color: white;
            margin-top: 1rem;
        }
        .clear-btn {
            background: #6c757d;
            color: white;
            margin-top: 1rem;
        }
        .send-btn:hover { background: #218838; }
        .emergency-btn:hover { background: #c82333; }
        .clear-btn:hover { background: #5a6268; }
        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 5px;
        }
        .emergency-box {
            background: #fff5f5;
            border: 2px solid #fed7d7;
            border-radius: 10px;
            padding: 1.5rem;
            margin-top: 2rem;
        }
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè• Sistema de Triagem Psicol√≥gica</h1>
            <p>ü§ñ Assistente IA ‚Ä¢ üîí Seguro ‚Ä¢ ‚òÅÔ∏è Dispon√≠vel 24/7</p>
            <p><strong>Status:</strong> {{ modo }}</p>
            <p><small>üíô Cuidado emocional sempre dispon√≠vel</small></p>
        </div>
        
        <div class="main-content">
            <div class="chat-container">
                <h3>üí¨ Conversa com Assistente de Triagem</h3>
                <div class="chat-messages" id="chatMessages">
                    <div class="message bot-message">
                        <strong>ü§ñ Assistente:</strong><br>
                        üè• <strong>Sistema de Triagem Psicol√≥gica Ativo</strong><br><br>
                        <strong>Status:</strong> {{ modo }} ‚òÅÔ∏è<br>
                        <strong>Disponibilidade:</strong> 24 horas, 7 dias por semana<br>
                        <strong>Seguran√ßa:</strong> Conex√£o criptografada SSL<br><br>
                        ü§ñ Sou seu assistente de triagem psicol√≥gica. Estou aqui para:<br>
                        ‚Ä¢ Ouvir suas preocupa√ß√µes<br>
                        ‚Ä¢ Oferecer apoio emocional<br>
                        ‚Ä¢ Direcionar para ajuda profissional quando necess√°rio<br>
                        ‚Ä¢ Detectar situa√ß√µes de emerg√™ncia<br><br>
                        <strong>Para come√ßar:</strong><br>
                        ‚Ä¢ Me diga seu nome<br>
                        ‚Ä¢ Conte como voc√™ est√° se sentindo hoje<br>
                        ‚Ä¢ Compartilhe o que est√° te preocupando<br><br>
                        <em>Este √© um ambiente seguro e confidencial. Vamos conversar?</em> üíô
                    </div>
                </div>
                
                <div class="input-container">
                    <input type="text" class="message-input" id="messageInput" 
                           placeholder="üí¨ Digite sua mensagem... Como voc√™ est√° se sentindo hoje?"
                           onkeypress="handleKeyPress(event)">
                    <button class="send-btn" onclick="sendMessage()">üì§ Enviar</button>
                </div>
                
                <div style="display: flex; gap: 1rem;">
                    <button class="clear-btn" onclick="clearChat()">üîÑ Nova Conversa</button>
                    <button class="emergency-btn" onclick="emergency()">üö® EMERG√äNCIA</button>
                </div>
            </div>
            
            <div class="status-panel">
                <h4>‚òÅÔ∏è Status do Sistema</h4>
                <div class="status-item">
                    <span><strong>üåê Disponibilidade:</strong></span>
                    <span>24/7</span>
                </div>
                <div class="status-item">
                    <span><strong>üîí Seguran√ßa:</strong></span>
                    <span>SSL/HTTPS</span>
                </div>
                <div class="status-item">
                    <span><strong>üì± Telegram:</strong></span>
                    <span>{{ telegram_status }}</span>
                </div>
                <div class="status-item">
                    <span><strong>ü§ó IA:</strong></span>
                    <span>{{ ia_status }}</span>
                </div>
                <div class="status-item">
                    <span><strong>üõ°Ô∏è Modo:</strong></span>
                    <span>{{ modo }}</span>
                </div>
                
                <div class="emergency-box">
                    <h4 style="color: #c53030;">üÜò Emerg√™ncias</h4>
                    <p><strong>üöë SAMU:</strong> 192</p>
                    <p><strong>üíô CVV:</strong> 188</p>
                    <p><strong>üöì Pol√≠cia:</strong> 190</p>
                    <p><strong>üöí Bombeiros:</strong> 193</p>
                    <hr style="margin: 10px 0;">
                    <p style="font-size: 12px; color: #666;">
                        Em caso de pensamentos suicidas ou emerg√™ncia, ligue imediatamente!
                    </p>
                </div>
            </div>
        </div>
    </div>

    <script>
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Adicionar mensagem do usu√°rio
            addMessage(message, 'user');
            input.value = '';
            
            // Enviar para o servidor
            fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({message: message})
            })
            .then(response => response.json())
            .then(data => {
                addMessage(data.response, 'bot');
            })
            .catch(error => {
                addMessage('‚ùå Erro de conex√£o. Tente novamente.', 'bot');
            });
        }
        
        function addMessage(message, sender) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            if (sender === 'user') {
                messageDiv.innerHTML = `<strong>üë§ Voc√™:</strong><br>${message}`;
            } else {
                messageDiv.innerHTML = `<strong>ü§ñ Assistente:</strong><br>${message}`;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function clearChat() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = `
                <div class="message bot-message">
                    <strong>ü§ñ Assistente:</strong><br>
                    üí¨ <strong>Nova conversa iniciada!</strong><br><br>
                    Como posso ajudar voc√™ hoje?<br><br>
                    <em>Este √© um ambiente seguro e confidencial.</em> üíô
                </div>
            `;
        }
        
        function emergency() {
            addMessage('üö® EMERG√äNCIA', 'user');
            addMessage(`üö® <strong>PROTOCOLO DE EMERG√äNCIA</strong> üö®<br><br>
                üìû <strong>LIGUE AGORA:</strong><br>
                ‚Ä¢ SAMU: 192<br>
                ‚Ä¢ CVV: 188<br>
                ‚Ä¢ Pol√≠cia: 190<br><br>
                <strong>VOC√ä N√ÉO EST√Å SOZINHO!</strong><br><br>
                Se voc√™ est√° tendo pensamentos suicidas ou est√° em perigo, ligue para um desses n√∫meros AGORA.<br><br>
                üíô Estamos aqui para voc√™.`, 'bot');
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE, 
                                modo=triagem.modo,
                                telegram_status='‚úÖ Ativo' if triagem.telegram_ativo else '‚ö†Ô∏è Config',
                                ia_status='‚úÖ Ativo' if triagem.hf_token else '‚ö†Ô∏è Config')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.get_json()
    message = data.get('message', '')
    
    try:
        response = triagem.demo_response(message)
        return jsonify({'response': response})
    except Exception as e:
        return jsonify({'response': f'‚ùå Erro: {str(e)}'})

if __name__ == "__main__":
    print("üöÄ Sistema de Triagem - Render Deploy (Flask)")
    print(f"üåê Porta: {PORT}")
    print(f"üè† Host: {HOST}")
    
    # Verificar configura√ß√£o
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    hf_token = os.getenv("HUGGINGFACE_TOKEN")
    dr_jose_id = os.getenv("DR_JOSE_CHAT_ID")
    
    print("üìã Verificando configura√ß√£o:")
    print(f"üì± Telegram: {'‚úÖ' if telegram_token else '‚ùå'}")
    print(f"ü§ó HuggingFace: {'‚úÖ' if hf_token else '‚ùå'}")
    print(f"üë®‚Äç‚öïÔ∏è Dr. Jos√© ID: {'‚úÖ' if dr_jose_id else '‚ùå'}")
    
    if not telegram_token or not hf_token:
        print("‚ö†Ô∏è Algumas vari√°veis de ambiente est√£o faltando")
        print("üé≠ Sistema funcionar√° em modo demonstra√ß√£o")
    else:
        print("‚úÖ Configura√ß√£o completa")
        print("ü§ñ Modo produ√ß√£o parcial")
    
    print("üöÄ Iniciando servidor Flask...")
    app.run(host=HOST, port=PORT, debug=False)